version: 2.1

# orbs
orbs:
  # https://circleci.com/orbs/registry/orb/circleci/node
  node: circleci/node@1.1.6
  # https://circleci.com/orbs/registry/orb/circleci/gcp-cli
  gcp-cli: circleci/gcp-cli@1.8.3

# executors
executors:
  go113-executor:
    working_directory: ~/app
    docker:
      - image: circleci/golang:1.13
    resource_class: small
  node-executor:
    working_directory: ~/app
    docker:
      - image: circleci/node:10.16.3
    resource_class: small
  gcloud-executor:
    working_directory: ~/app
    docker:
      - image: google/cloud-sdk:latest
    resource_class: small

# commands
commands:
  gcp_cli_initialize:
    description: "gcp cli initialize"
    steps:
      - gcp-cli/initialize:
          gcloud-service-key: GCLOUD_SERVICE_KEY
          google-compute-zone: GOOGLE_COMPUTE_ZONE
          google-project-id: GOOGLE_PROJECT_ID

# jobs
jobs:
  build-server:
    executor: go113-executor
    parameters:
      cache_key:
        type: string
      cache_version:
        type: string
      working_dir:
        type: string
    steps:
      - checkout
      - restore_cache:
          keys:
            - << parameters.cache_key >>
            - << parameters.cache_version >>
      - run:
          name: download go modules
          command: go mod download
          working_directory: << parameters.working_dir >>
      - save_cache:
          key: << parameters.cache_key >>
          paths:
            - /go/pkg/mod
      - run:
          name: Install GolangCI-Lint
          command: curl -sfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh| sh -s -- -b $(go env GOPATH)/bin v1.26.0
      - run:
          name: Run GolangCI-Lint
          command: golangci-lint run --disable-all --enable=goimports --enable=golint --enable=govet --enable=errcheck --enable=staticcheck ./...
          working_directory: << parameters.working_dir >>

  build-client:
    executor: node-executor
    steps:
      - checkout
      - node/with-cache:
          cache-key: "client/package-lock.json"
          cache-version: "{{ .Environment.CACHE_KEY }}"
          dir: "~/.npm"
          steps:
            - run:
                working_directory: client
                command: npm ci
          use-strict-cache: false
      - run:
          name: lint
          command: npm run lint
          working_directory: client
      - run:
          name: build
          command: npm run build
          working_directory: client
      - persist_to_workspace:
          root: server/frontend/static
          paths:
            - .

  deploy:
    executor: gcloud-executor
    parameters:
      working_dir:
        type: string
    steps:
      - run: gcloud --version
      - checkout
      - attach_workspace:
          at: server/frontend/static
      - run:
          name: deploy
          command: |
            PROJECT=$(gcloud config list --format="value(core.project)")
            VERSION=$(git rev-parse --short=8 HEAD)
            gcloud app deploy --quiet ../dispatch.yaml --project=$PROJECT --version=$VERSION
          working_directory: << parameters.working_dir >>

# workflows
workflows:
  build:
    jobs:
      - build-server:
          name: build-frontend-server
          cache_key: go-mod-server-{{ .Environment.CACHE_KEY }}-{{ checksum "server/frontend/go.mod" }}
          cache_version: go-mod-server-{{ .Environment.CACHE_KEY }}
          working_dir: server/frontend
      - build-server:
          name: build-backend-server
          cache_key: go-mod-server-{{ .Environment.CACHE_KEY }}-{{ checksum "server/backend/go.mod" }}
          cache_version: go-mod-server-{{ .Environment.CACHE_KEY }}
          working_dir: server/backend
      - build-client
      - deploy:
          name: deploy-frontend
          pre-steps:
            - gcp_cli_initialize
          requires:
            - build-frontend-server
            - build-client
          working_dir: server/frontend
      - deploy:
          name: deploy-backend
          pre-steps:
            - gcp_cli_initialize
          requires:
            - build-backend-server
          working_dir: server/backend
